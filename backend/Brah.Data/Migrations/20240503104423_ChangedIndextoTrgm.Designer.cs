// <auto-generated />
using System;
using Brah.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brah.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240503104423_ChangedIndextoTrgm")]
    partial class ChangedIndextoTrgm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("article_tag", (string)null);
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("Karma")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gin_trgm_ops" });

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Karma = 15,
                            Text = "example example example example example example example example example example example example example example example example example example example example example example example example example",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc),
                            Title = "Text example",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Karma = 15,
                            Text = "example example example example example example example example example example example example example example example example example example example example example example example example example",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc),
                            Title = "Text example 2",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Karma = 15,
                            Text = "example example example example example example example example example example example example example example example example example example example example example example example example example",
                            TimePosted = new DateTime(2024, 5, 1, 16, 41, 28, 0, DateTimeKind.Utc),
                            Title = "Text example 3",
                            TopicId = 1
                        });
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Commentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Commentaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            AuthorId = 1,
                            Text = "Как дела? Пока не родила",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 1,
                            AuthorId = 1,
                            ParentId = 1,
                            Text = "Как дела? Пока не родила",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 1,
                            AuthorId = 1,
                            ParentId = 2,
                            Text = "Как дела? Пока не родила",
                            TimePosted = new DateTime(2024, 5, 2, 16, 42, 28, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 1,
                            AuthorId = 1,
                            ParentId = 1,
                            Text = "Как дела? Пока не родила",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 1,
                            AuthorId = 1,
                            ParentId = 2,
                            Text = "Как дела? Пока не родила",
                            TimePosted = new DateTime(2024, 5, 2, 16, 41, 28, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Разработка"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Администрирование"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Дизайн"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Менеждмент"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Маркетинг"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Разное"
                        });
                });

            modelBuilder.Entity("Brah.Data.Models.Resumes.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("LeftSalaryBorder")
                        .HasColumnType("integer");

                    b.Property<bool>("LookingForWork")
                        .HasColumnType("boolean");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RightSalaryBorder")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Profession");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Profession"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Profession"), new[] { "gin_trgm_ops" });

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("Brah.Data.Models.Resumes.WorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResumeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("Brah.Data.Models.Tags.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.ToTable("ArticleTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Different 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Different 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Different 3"
                        });
                });

            modelBuilder.Entity("Brah.Data.Models.Tags.ResumeTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "GIN");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.ToTable("ResumeTags");
                });

            modelBuilder.Entity("Brah.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarLink")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarLink = "https://sun9-79.userapi.com/impg/yqlWcDEY_zY_G76v_qtDQNxmT4xelEj7PD4eVQ/UNb379wiAtM.jpg?size=1920x1080&quality=96&sign=6fef3a6e0f180bf645c4596c8d8ae2dd",
                            FirstName = "Nikolay",
                            LastName = "Rerich",
                            PasswordHashed = "DefaultPassword",
                            Role = 0,
                            UserName = "DeadWeight47"
                        });
                });

            modelBuilder.Entity("ResumeResumeTag", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ResumeId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("resume_tag", (string)null);
                });

            modelBuilder.Entity("ArticleArticleTag", b =>
                {
                    b.HasOne("Brah.Data.Models.Articles.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brah.Data.Models.Tags.ArticleTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Article", b =>
                {
                    b.HasOne("Brah.Data.Models.Articles.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Brah.Data.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Commentary", b =>
                {
                    b.HasOne("Brah.Data.Models.Articles.Article", "Article")
                        .WithMany("Commentaries")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brah.Data.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brah.Data.Models.Articles.Commentary", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Brah.Data.Models.Resumes.Resume", b =>
                {
                    b.HasOne("Brah.Data.Models.User", "User")
                        .WithOne("Resume")
                        .HasForeignKey("Brah.Data.Models.Resumes.Resume", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brah.Data.Models.Resumes.WorkPlace", b =>
                {
                    b.HasOne("Brah.Data.Models.Resumes.Resume", "Resume")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeResumeTag", b =>
                {
                    b.HasOne("Brah.Data.Models.Resumes.Resume", null)
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brah.Data.Models.Tags.ResumeTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Article", b =>
                {
                    b.Navigation("Commentaries");
                });

            modelBuilder.Entity("Brah.Data.Models.Articles.Commentary", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Brah.Data.Models.Resumes.Resume", b =>
                {
                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Brah.Data.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Resume");
                });
#pragma warning restore 612, 618
        }
    }
}
